import "@/app/globals.css";
import theme from "@/app/theme";
import DrawerList from "@/app/ui/drawer-list";
import AttachMoneyIcon from "@mui/icons-material/AttachMoney";
import CategoryIcon from "@mui/icons-material/Category";
import CreateNewFolderIcon from '@mui/icons-material/CreateNewFolder';
import HomeIcon from "@mui/icons-material/Home";
import NoteAddIcon from '@mui/icons-material/NoteAdd';
import { AppRouterCacheProvider } from "@mui/material-nextjs/v15-appRouter";
import AppBar from "@mui/material/AppBar";
import Box from "@mui/material/Box";
import CssBaseline from "@mui/material/CssBaseline";
import Divider from "@mui/material/Divider";
import Drawer from "@mui/material/Drawer";
import { ThemeProvider } from "@mui/material/styles";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import type { Metadata } from "next";
import { Geist, Geist_Mono, Roboto } from "next/font/google";
import React from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const roboto = Roboto({
  weight: ["300", "400", "500", "700"],
  subsets: ["latin"],
  display: "swap",
  variable: "--font-roboto",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const drawerWidth = 256;

const groupedLinks = [
  [
    {
      text: "Home",
      icon: <HomeIcon />,
      href: "/",
    },
  ],
  [
    {
      text: "Create Expense",
      icon: <NoteAddIcon />,
      href: "/expenses/create",
    },
    {
      text: "View Expenses",
      icon: <AttachMoneyIcon />,
      href: "/expenses",
    },
  ],
  [
    {
      text: "Create Category",
      icon: <CreateNewFolderIcon />,
      href: "/categories/create",
    },
    {
      text: "View Categories",
      icon: <CategoryIcon />,
      href: "/categories",
    },
  ],
];

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={
        `${geistSans.variable} ${geistMono.variable} ${roboto.variable}`
      }>
        <ThemeProvider theme={theme}>
          <AppRouterCacheProvider options={{ key: "css" }}>
            <Box sx={{ display: "flex" }}>
              <CssBaseline />

              <AppBar position="fixed" sx={{ zIndex: 1_201 }}>
                <Toolbar>
                  <Typography variant="h6" noWrap component="div">
                    Monthly Living Expenses
                  </Typography>
                </Toolbar>
              </AppBar>

              <Drawer
                variant="permanent"
                sx={{
                  width: drawerWidth,
                  flexShrink: 0,
                  ["& .MuiDrawer-paper"]: {
                    width: drawerWidth,
                    boxSizing: "border-box",
                  },
                }}
              >
                <Toolbar />

                <Box sx={{ overflow: "auto" }}>
                  {groupedLinks.map((links, index) => (
                    <React.Fragment key={index}>
                      <DrawerList links={links} />
                      {index < groupedLinks.length - 1 && <Divider />}
                    </React.Fragment>
                  ))}
                </Box>
              </Drawer>

              <Box
                component="main"
                sx={{ flexGrow: 1, bgcolor: "background.default", p: 3 }}
              >
                <Toolbar />
                {children}
              </Box>
            </Box>
          </AppRouterCacheProvider>
        </ThemeProvider>
      </body>
    </html >
  );
}
